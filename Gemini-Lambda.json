{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The Cloud Formation wiil create Lambda With API gateway and AWS API Key. Stack Created By Workmates.",
  "Parameters": {
    "LambdaBucket": {
      "Description": "Please enter lambda bucket",
      "Type": "String",
      "Default": "sam-code-new"
    },
    "LambdaCode": {
      "Description": "Please enter lambda code key",
      "Type": "String",
      "Default": "lambda_function.zip"
    },
    "EndPoint": {
      "Description": "Provide third party endpoint",
      "Type": "String",
      "Default": "https://api.crowdstrike.com/"
    },
    "ClientID": {
      "Description": "Provide client ID",
      "Type": "String",
      "Default": "6333e1dc5a794c9b941a73b4aa1dc586"
    },
    "SecretID": {
      "Description": "Provide secret ID",
      "Type": "String",
      "Default": "28TMNzC6oWXuq7fYQ4kUm591rKIJFZly0dVwxbg3"
    },
    "Token": {
      "Description": "Provide Token key",
      "Type": "String",
      "Default": "48342cd9f8859f998feff3b19521cd74ad82fea3e11385fc7c238f28e75c61d2"
    }
  },
  "Resources": {
    "LambdaFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaFunctionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "logs:CreateLogGroup",
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:log-group:/aws/lambda/wcm-auth:*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaFunctionMain": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "wcm-auth-V1",
        "Runtime": "python3.7",
        "Timeout": 300,
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "API_ENDPOINT": {
              "Ref": "EndPoint"
            },
            "MYCLIENT_ID": {
              "Ref": "ClientID"
            },
            "MY_SECRET": {
              "Ref": "SecretID"
            },
            "TOKEN": {
              "Ref": "Token"
            }
          }
        },
        "Code": {
          "S3Bucket": {
            "Ref": "LambdaBucket"
          },
          "S3Key": {
            "Ref": "LambdaCode"
          }
        }
      }
    },
    "Api": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Gemini API",
        "Description": "API used for lambda trigger",
        "FailOnWarnings": true
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunctionMain",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "Api"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiGatewayCloudWatchLogsRole",
            "Arn"
          ]
        }
      }
    },
    "ApiStage": {
      "DependsOn": [
        "ApiGatewayAccount"
      ],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ApiDeployment"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "RestApiId": {
          "Ref": "Api"
        },
        "StageName": "Prod"
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "Request"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "Api"
        },
        "StageName": "Stage"
      }
    },
    "Resource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "Api"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "Api",
            "RootResourceId"
          ]
        },
        "PathPart": "wcm-euc"
      }
    },
    "Request": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "ApiKeyRequired": true,
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaFunctionMain",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ]
        },
          "ResourceId": {
          "Ref": "Resource"
        },
        "RestApiId": {
          "Ref": "Api"
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseModels": { "application/json": "Empty" }
          }
        ]
      }
    },
    "APIKey": {
      "Type": "AWS::ApiGateway::ApiKey",
      "DependsOn": [
        "Api",
        "ApiDeployment"
      ],
      "Properties": {
        "Description": "API Key created by CFN",
        "Enabled": true,
        "Name": "wcm-euc-api-key-V1",
        "StageKeys": [
          {
            "StageName": "Prod",
            "RestApiId": {
              "Ref": "Api"
            }
          }
        ]
      }
    },
    "UsagePlan": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "DependsOn": [
        "Api",
        "ApiDeployment",
        "ApiStage"
      ],
      "Properties": {
        "UsagePlanName": "Gemini-UsagePlan",
        "Description": "This plan associate with Gemini API for post method",
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "Api"
            },
            "Stage": "Prod"
          }
        ]
      }
    },
    "UsagePlanKey": {
      "Type": "AWS::ApiGateway::UsagePlanKey",
      "DependsOn": [
        "APIKey",
        "UsagePlan",
        "ApiStage"
      ],
      "Properties": {
        "KeyId": {
          "Ref": "APIKey"
        },
        "KeyType": "API_KEY",
        "UsagePlanId": {
          "Ref": "UsagePlan"
        }
      }
    }
  },
  "Outputs": {
    "ApiUrl": {
      "Description": "API endpoint URL for Prod environment",
      "Value": {
        "Fn::Sub": "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      }
    },
    "APIKey": {
      "Description": "AWS KEY ID for reference ",
      "Value": {
        "Ref": "APIKey"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Global Configuration"
          },
          "Parameters": [
            "LambdaBucket",
            "LambdaCode"
          ]
        },
        {
          "Label": {
            "default": "Lambda Environment Configuration"
          },
          "Parameters": [
            "EndPoint",
            "ClientID",
            "SecretID",
            "Token"
          ]
        }
      ],
      "ParameterLabels": {
        "LambdaBucket": {
          "default": "Bucket Name (S3)"
        },
        "LambdaCode": {
          "default": "Lambda File Name"
        },
        "EndPoint": {
          "default": "End Point"
        },
        "ClientID": {
          "default": "Client ID"
        },
        "SecretID": {
          "default": "Secret"
        },
        "Token": {
          "default": "Token"
        }
      }
    }
  }
}
